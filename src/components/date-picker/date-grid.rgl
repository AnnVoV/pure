<template>
	<div class="r-date-grid">
		{#list dates as d}
		<div class="r-date-grid-cell">{ d.date }</div>
		{/list}
	</div>
</template>

<script>
	export default {
		name: 'DateGrid',
		config() {
			const year = Number( this.data.year );
			const month = Number( this.data.month );
			const dates = [];
			let tmp;

			const currentMonthMaxDate = getMaxDateOfMonth( year, month );
			const firstDayOfCurrentMonth = getFirstDayOfMonth( year, month );

			tmp = firstDayOfCurrentMonth;
			for ( let i = 1; i <= currentMonthMaxDate; i++ ) {
				dates.push( {
					date: i,
					day: tmp % 7
				} );
				tmp++;
			}

			const prevMonthMaxDate = getMaxDateOfMonth( ...getPrevMonth( year, month ) );

			// pad previous month
			let day = dates[ 0 ].day;
			tmp = prevMonthMaxDate;
			while( day > 0 ) {
				dates.unshift( {
					date: tmp,
					day: ( day - 1 ) % 7
				} );
				tmp--;
				day--;
			}

			// pad next month
			day = dates[ dates.length - 1 ].day;
			let padLen = 7 - dates.length % 7;
			for ( let i = 0; i < padLen; i++ ) {
				dates.push( {
					day: day,
					date: i + 1
				} );
				day++;
			}

			this.data.dates = dates;
		}
	};

	function getPrevMonth( year, month ) {
		month = month - 1;
		if ( month < 0 ) {
			year = year - 1;
			month = 12;
		}
		return [ year, month ];
	}

	function getFirstDayOfMonth( year, month ) {
		return new Date( year, month - 1, 1 ).getDay();
	}

	function getMaxDateOfMonth( year, month ) {
		return new Date( year, month, 0 ).getDate();
	}
</script>

<style lang="less" scoped>
	@border-color: #DDD;

	.r-date-grid {
		display: flex;
		flex-wrap: wrap;
		width: 100%;
		border-left: solid 1px @border-color;
		border-top: solid 1px @border-color;
		cursor: pointer;

		.r-date-grid-cell {
			box-sizing: border-box;
			flex-shrink: 0;
			width: 14.28%;
			border-right: solid 1px @border-color;
			border-bottom: solid 1px @border-color;
			padding: 5px 5px;
			text-align: center;
		}
	}
</style>
