<template>
	<div class="r-element-tree-node { open ? 'r-element-tree-node-open' : '' }">
		<ElementTreeNodeOpen node="{ node }" depth="{ depth }" selected="{ tagOpenSelected }"  on-click="{ this.onTagOpenClick() }" on-toggle="{ this.onToggle() }" children="{ node.children }" open="{ open }"></ElementTreeNodeOpen>

		{#if open}
			{#if node.children}
				<div class="children">
					{#list node.children as child}
						<ElementTreeNode node="{ child }" depth="{ depth + 1 }" on-select="{ this.onSelect( $event ) }" selectedNode="{ selectedNode }" selectedPosition="{ selectedPosition }"></ElementTreeNode>
					{/list}
				</div>
			{/if}

			<ElementTreeNodeClose node="{ node }" depth="{ depth }" on-click="{ this.onTagCloseClick() }" selected="{ tagCloseSelected }"></ElementTreeNodeClose>
		{/if}
	</div>
</template>

<script>
	export default {
		name: 'ElementTreeNode',
		config() {
			this.data.depth = this.data.depth || 0;
			if( this.data.node && this.data.node.children ) {
				this.data.open = true;
			} else {
				this.data.open = false;
			}
		},
		computed: {
			tagOpenSelected: {
				get() {
					return this.data.selectedNode === this.data.node &&
						this.data.selectedPosition === 'open';
				},
				set() {

				}
			},
			tagCloseSelected: {
				get() {
					return this.data.selectedNode === this.data.node &&
						this.data.selectedPosition === 'close';
				},
				set() {

				}
			}
		},
		onTagOpenClick() {
			if( this.data.tagOpenSelected ) {
				return;
			}
			this.$emit( 'select', {
				node: this.data.node,
				position: 'open'
			} );
		},
		onTagCloseClick() {
			if( this.data.tagCloseSelected ) {
				return;
			}
			this.$emit( 'select', {
				node: this.data.node,
				position: 'close'
			} );
		},
		onSelect( v ) {
			// 传递
			this.$emit( 'select', v );
		},
		onToggle() {
			this.data.open = !this.data.open;
			this.$update();
		}
	};
</script>

<style lang="less" scoped>
	.r-element-tree-node {
		cursor: default;
	}
</style>
